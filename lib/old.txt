#attributes = { reg_type: 'new', product_type: 'quickssl' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml
#
#attributes = { reg_type: 'new', product_type: 'securesite_ft' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml
#
##
#attributes = { reg_type: 'new', product_type: 'malwarescan' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml
##
#attributes = { reg_type: 'renew', order_id: '123432' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml
##
#attributes = { reg_type: 'renew', product_id: '123432' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml
##
#attributes = { reg_type: 'renew', inventory_item_id: '123432' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml


#puts "---------------------------------------------"
#puts roi.request_xml
#puts roi.response_xml
#puts "---------------------------------------------"
#puts rpi.request_xml
#puts rpi.response_xml
#puts "---------------------------------------------"
#puts rco.request_xml
#puts rco.response_xml
#puts "---------------------------------------------"
#puts rpc.request_xml
#puts rpc.response_xml
#puts "---------------------------------------------"
#puts rsc.request_xml
#puts rsc.response_xml
#
#puts "---------------------------------------------"
#puts ral.request_xml
#puts ral.response_xml
#puts "---------------------------------------------"
#puts rsae.request_xml
#puts rsae.response_xml
#puts "---------------------------------------------"
#puts rrce.request_xml
#puts rrce.response_xml



  ## renew queries
  #def get_renew_ssl_an_order_to_upgrade_a_sitelock_ssl_certificate_to_sitelock_premium
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'upgrade'
  #    }
  #  )
  #end
  #
  #def get_renew_ssl_a_new_order_for_a_quickssl_certificate_based_on_an_existing_order
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'new',
  #      :product_type => 'quickssl'
  #    }
  #  )
  #end
  #
  #def get_renew_ssl_an_order_for_a_30_day_free_trial_of_a_symantec_securesite_certificate
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'new',
  #      :product_type => 'securesite_ft'
  #    }
  #  )
  #end
  #
  #def get_renew_ssl_an_order_for_a_geotrust_web_site_anti_malware_scan_certificate
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'new',
  #      :product_type => 'malwarescan'
  #    }
  #  )
  #end
  #
  #def get_renew_ssl_a_renewal_order_for_a_quickssl_certificate_that_was_submitted_by_using_the_order_id(order_id)
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'renew',
  #      :order_id => order_id
  #    }
  #  )
  #end
  #
  #def get_renew_ssl_renewal_order_for_a_quickssl_certificate(product_id)
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'renew',
  #      :product_id => product_id
  #    }
  #  )
  #end
  #
  #
  #def get_renew_ssl_a_renewal_order_for_a_quickssl_certificate_that_was_submitted_by_using_the_product_id(inventory_item_id)
  #  server_local.call(
  #    :action => "SW_REGISTER",
  #    :object => "TRUST_SERVICE",
  #    :attributes => {
  #      :reg_type => 'renew',
  #      :inventory_item_id => inventory_item_id
  #    }
  #  )
  #end


#roi = opensrs_request.request_order_info("123242")
#rpi = opensrs_request.request_product_info("99")
#rco = opensrs_request.request_cancel_order("34453")
#
#sslcert = %q(-----BEGIN CERTIFICATE REQUEST----- MIIBqTCCARICAQAwaTELMAkGA1UEBhMCQ0ExCzAJBgNVBAgTAm9uMRAwDgYDVQQH
#Ewd0b3JvbnRvMQ8wDQYDVQQKEwZ0dWNvd3MxCzAJBgNVBAsTAnFhMR0wGwYDVQQD
#ExR3d3cucWFyZWdyZXNzaW9uLm9yZzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC
#gYEAz+hbqqnE5BSW0THf7txxsJxF8Vtca2uL52iutI1SRTm9J6NNtAjgMbL9upOm
#SFnObpWKriUIlvxKrecygGWkjiMeyU/F6auAS9/vwDdxYEVT2szK+Q2At1FgU433
#Pds53v2J/vyB6SL+k/w54H2gF4ORpU1hjUggo7fM353TeeMCAwEAAaAAMA0GCSqG
#SIb3DQEBBAUAA4GBAIYvVThVeocN7N7HbsO/au9AXnx6LULQ5LMDWx6FlyBB5g9h
#5HYZa6xieYCYDxYIsjLjR3qx1BWl9+0kSL2MW4EdDPzbcrZvHAtrw2/hPrm9EGA3
#2w3a26W79N3clCkrahnpcNFLFyzU3CtZASJ+VuixGXTEkdiBAliqtGp+QBhf -----END
#CERTIFICATE REQUEST-----)
#rpc = opensrs_request.request_parse_csr("quickssl",sslcert)
#
#rsc = opensrs_request.request_register_ssl_cert("2324434")
#
#ral =  opensrs_request.request_approver_list("www.mail.ru","quickssl")
#rsae = opensrs_request.request_resend_approve_email("1232")
#rrce = opensrs_request.request_resend_cert_email("232432")

#attributes = { reg_type: 'upgrade' }
#grs = opensrs_request.renew_ssl(attributes)
#puts "---------------------------------------------"
#puts grs.request_xml
#puts grs.response_xml


  #---------------------------------------------

  #def order_info(order_id)
  #  remote_server.call(
  #        :action => "GET_ORDER_INFO",
  #        :object => "DOMAIN",
  #        :attributes => {
  #          :order_id => order_id
  #        }
  #      )
  #end

  #def product_info(product_id)
  #  remote_server.call(
  #        :action => "GET_PRODUCT_INFO",
  #        :object => "TRUST_SERVICE",
  #        :attributes => {
  #          :product_id => product_id
  #        }
  #      )
  #end


  def approver_list(domain, product_type)
    remote_server.call(
          :action => "QUERY_APPROVER_LIST",
          :object => "TRUST_SERVICE",
          :attributes => {
            :domain => domain,
            :product_type => product_type

          }
        )
  end

  def resend_approve_email(order_id)
    remote_server.call(
          :action => "RESEND_APPROVE_EMAIL",
          :object => "TRUST_SERVICE",
          :attributes => {
            :order_id => order_id
          }
        )
  end

  def resend_cert_email(order_id)
    remote_server.call(
          :action => "RESEND_CERT_EMAIL",
          :object => "TRUST_SERVICE",
          :attributes => {
            :order_id => order_id
          }
        )
  end


ssl_certificate = {
  :nomenclature_id => :integer,

  :csr => :text,

  :common_name => :string,
  :validation_email => :string,

  :additional_domains => :text,
  :additional_validation_emails => :text,

  :country => :string,
  :zip => :string,
  :stateorprovincename => :string,
  :city => :string,
  :street1 => :string,
  :street2 => :string,
  :organisation_name => :string,
  :organisation_unit => :string,

  :server_count => :integer,
  :domain_count => :integer,
  :ssl_server_software_id => :integer,

  :duration => :integer,
  :valid_from => :date,
  :valid_to => :date,

  :issuer_order_number => :string,
  :provider_order_number => :string,
  :serial_number => :string,

  :certificate_state => :string,
  :issuer_order_date => :datetime,
  :issuer_order_state => :string,
  :issuer_order_state_additional => :string, #только для Comodo
  :issuer_order_state_minor_code => :string, #только для Comodo
  :issuer_order_state_minor_name => :string, #только для Comodo

  :issued_dt => :datetime,
  :our_sell_price => :decimal,
  :our_sell_currency => :string,

  :admin_contact_person_id => :integer,
  :tech_contact_person_id => :integer,
  :callback_contact_person_id => :integer,

  :approver_notified_date => :datetime,
  :approver_confirm_date => :datetime,

  :organisation_phone => :string,
  :organisation_fax => :string,

  :provider_id => :integer,

  :company_number => :string,
  :dcv_method => :string,
}

      #:code => :string,
      #:name => :string,
      #:price => :decimal,
      #:certificate_type => %w{standart wildcard ucc code_signing},
      #:validation_type => %w{ov dv},
      #:is_ev => :boolean,
      #:is_sgc => :boolean,
      #:issuer_organization_name => :string,
      #:is_free => :boolean,
      #:discontinued => :boolean,
      #:is_email_validated => :boolean,
      #:domain_name => 'example.ru'


        #if reg_type == "upgrade"
        #  result[:data] = item_open_srs_client.renew_an_order_to_upgrade(@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"])
        #  result[:layout] = "renew_an_order_to_upgrade_a_sitelock_ssl_certificate_to_sitelock_premium"
        #
        #elsif reg_type == "new" && product_type == "quickssl"
        #  result[:data] = item_open_srs_client.get_renew_ssl_a_new_order_for_a_quickssl_certificate_based_on_an_existing_order(@request_hash["base_order_id"],@request_hash["csr"],@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"]["contact_set"]["dt_assoc"]["admin"]["dt_assoc"])
        #  result[:layout] = "renew_a_new_order_for_a_quickssl_certificate_based_on_an_existing_order"
        #
        #elsif reg_type == "new" && product_type == "securesite_ft"
        #  result[:data] = item_open_srs_client.get_renew_ssl_an_order_for_a_30_day_free_trial_of_a_symantec_securesite_certificate(@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"])
        #  result[:layout] = "renew_an_order_for_a_30_day_free_trial_of_a_symantec_securesite_certificate"
        #
        #elsif reg_type == "new" && product_type == "malwarescan"
        #  result[:data] = item_open_srs_client.get_renew_ssl_an_order_for_a_geotrust_web_site_anti_malware_scan_certificate(@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"])
        #  result[:layout] = "renew_an_order_for_a_geotrust_web_site_anti_malware_scan_certificate"
        #
        #elsif reg_type == "renew" && !order_id.blank?
        #  result[:data] = item_open_srs_client.get_renew_ssl_a_renewal_order_for_a_quickssl_certificate_that_was_submitted_by_using_the_order_id(@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"])
        #  result[:layout] = "renew_a_renewal_order_for_a_quickssl_certificate_that_was_submitted_by_using_the_order_id"
        #
        #elsif reg_type == "renew" && !inventory_item_id.blank?
        #  result[:data] = item_open_srs_client.get_renew_ssl_a_renewal_order_for_a_quickssl_certificate_that_was_submitted_by_using_the_product_id(@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"])
        #  result[:layout] = "renew_a_renewal_order_for_a_quickssl_certificate_that_was_submitted_by_using_the_product_id"
        #
        #elsif reg_type == "renew" && !product_id.blank?
        #  result[:data] = item_open_srs_client.get_renew_ssl_renewal_order_for_a_quickssl_certificate(@request_hash["full"]["dt_assoc"]["attributes"]["dt_assoc"])
        #  result[:layout] = "renew_renewal_order_for_a_quickssl_certificate"
        #else
        #  result[:data] = item_open_srs_client.register_ssl_cert(@request_hash["order_id"])
        #  result[:layout] = "register_ssl_cert_response"
        #end


  #before_filter :authenticate_user
    #opensrs_response = OpenSRSResponse.new(opensrs_request)
    #client_data = opensrs_response.client_data


    #puts opensrs_response.at_css("item").text
    #attributes = {:foo => {:bar => 'baz'}}
    #xxml = OpenSRS::XmlProcessor::Nokogiri.build(attributes)
    #puts xxml
    #render :xml => xml_body
    #OpenSRS::Server.xml_processor = :nokogiri

    # Rails.logger.debug "#{authenticate_client_function(username,signature)}"
  #private
  #def authenticate_user
  #  username = request.headers["X-Username"]
  #  signature = request.headers["X-Signature"]
  #  @current_user = User.find_by_signature(signature)
  #    #unless @current_user
  #    #  respond_with({:error => "Signature is invalid." })
  #    #end
  #end
    # Rails.logger.debug "#{opensrs_request.inspect}"
    # Rails.logger.debug "#{opensrs_response.response.inspect}"

      #command = OpenSRSResponse.new(opensrs_request_hash).response(opensrs)
